#nullable enable
Microsoft.Maui.Controls.ContextFlyout
Microsoft.Maui.Controls.ContextFlyout.Clear() -> void
Microsoft.Maui.Controls.ContextFlyout.ContextFlyout() -> void
Microsoft.Maui.Controls.ContextFlyout.Count.get -> int
Microsoft.Maui.Controls.ContextFlyout.IsReadOnly.get -> bool
Microsoft.Maui.Controls.ContextFlyout.RemoveAt(int index) -> void
Microsoft.Maui.Controls.MenuFlyoutSeparator
Microsoft.Maui.Controls.MenuFlyoutSeparator.MenuFlyoutSeparator() -> void
override Microsoft.Maui.Controls.ContentPresenter.ArrangeOverride(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Controls.ContentPresenter.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Controls.FlyoutPage.OnDisappearing() -> void
override Microsoft.Maui.Controls.Grid.OnBindingContextChanged() -> void
override Microsoft.Maui.Controls.Handlers.Compatibility.FrameRenderer.SetNeedsLayout() -> void
override Microsoft.Maui.Controls.TemplatedView.ArrangeOverride(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Controls.TemplatedView.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.ContentView.ArrangeOverride(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.ContentView.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.RadioButton.ArrangeOverride(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.RadioButton.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.FlexLayout.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
static readonly Microsoft.Maui.Controls.VisualElement.ZIndexProperty -> Microsoft.Maui.Controls.BindableProperty!
~Microsoft.Maui.Controls.ContextFlyout.Add(Microsoft.Maui.IMenuElement item) -> void
~Microsoft.Maui.Controls.ContextFlyout.Contains(Microsoft.Maui.IMenuElement item) -> bool
~Microsoft.Maui.Controls.ContextFlyout.CopyTo(Microsoft.Maui.IMenuElement[] array, int arrayIndex) -> void
~Microsoft.Maui.Controls.ContextFlyout.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.IMenuElement>
~Microsoft.Maui.Controls.ContextFlyout.IndexOf(Microsoft.Maui.IMenuElement item) -> int
~Microsoft.Maui.Controls.ContextFlyout.Insert(int index, Microsoft.Maui.IMenuElement item) -> void
~Microsoft.Maui.Controls.ContextFlyout.Remove(Microsoft.Maui.IMenuElement item) -> bool
~Microsoft.Maui.Controls.ContextFlyout.this[int index].get -> Microsoft.Maui.IMenuElement
~Microsoft.Maui.Controls.ContextFlyout.this[int index].set -> void
~virtual Microsoft.Maui.Controls.View.ContextFlyout.get -> Microsoft.Maui.IContextFlyout
